/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CLientGUI;

import Common.Question;
import com.alee.laf.WebLookAndFeel;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import java.util.*;

/**
 *
 * @author Pedro
 */
public class QuestionGUI extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form Challenge
     */
    int time;
    Question q;
    TimerUpdate timer;
    boolean answer = false;
    AnswerInformer ansInfo;
    int n_question;
    public QuestionGUI() {
        //try {
            initComponents();
            
            //byte[] finalarr = Files.readAllBytes(Paths.get("Challenges\\imagens\\000003.jpg"));
            //this.imageContainer.add(new PaintImage(finalarr),"image");
            //timer = new TimerUpdate();
            
            //time = 60;
            //timer_lb.setText("1:00");
            //byte[] music = Files.readAllBytes(Paths.get("Challenges\\musica\\000003.mp3"));
            //init(music);
            
            //((CardLayout)jPanel1.getLayout()).show(jPanel1, "image");
        //} catch (IOException ex) {
          //  Logger.getLogger(QuestionGUI.class.getName()).log(Level.SEVERE, null, ex);
        //}
        
    }
    final void init(byte[][] music){
      
        try {
            timer.addObserver(this);
            new QuestionRunner(music,timer).start();
        } catch (IOException ex) {
            Logger.getLogger(QuestionGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    public QuestionGUI(Question question,GameThread gt,int qt) {
        this.q = question;
        initComponents();
        this.imageContainer.add(new PaintImage(q.getImage()),"image");
        this.answer1.setText(q.getAnswer1());
        this.answer2.setText(q.getAnswer2());
        this.answer3.setText(q.getAnswer3());
        this.question.setText(q.getQuestion());
        timer = new TimerUpdate(); 
        time = 60;
        timer_lb.setText("1:00");
        init(q.getMusic());
        this.ansInfo = new AnswerInformer();
        ansInfo.addObserver(gt);
        n_question  =qt;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        answer1 = new javax.swing.JButton();
        answer2 = new javax.swing.JButton();
        answer3 = new javax.swing.JButton();
        imageContainer = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        question = new javax.swing.JLabel();
        timer_lb = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        answer1.setText("Resposta1");
        answer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answer1ActionPerformed(evt);
            }
        });

        answer2.setText("Resposta2");
        answer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answer2ActionPerformed(evt);
            }
        });

        answer3.setText("Resposta3");
        answer3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answer3ActionPerformed(evt);
            }
        });

        imageContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagem"));
        imageContainer.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pergunta :");

        question.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        question.setText("exemplo de pergunta ? ");

        timer_lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timer_lb.setText("0:59");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(question)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(answer1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(answer2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(answer3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(timer_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(42, 42, 42))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(question))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(imageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(39, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(answer1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(answer2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(answer3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(timer_lb)
                        .addGap(69, 69, 69))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answer1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answer1ActionPerformed
        // TODO add your handling code here:
        this.ansInfo.answer(this.n_question, 1, this.time);
        this.answer = true;
    }//GEN-LAST:event_answer1ActionPerformed

    private void answer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answer2ActionPerformed
        this.ansInfo.answer(this.n_question, 3, this.time);
        this.answer = true;
    }//GEN-LAST:event_answer2ActionPerformed

    private void answer3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answer3ActionPerformed
       this.ansInfo.answer(this.n_question, 3, this.time);
        this.answer = true;
    }//GEN-LAST:event_answer3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                boolean install = WebLookAndFeel.install(); 
                new QuestionGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answer1;
    private javax.swing.JButton answer2;
    private javax.swing.JButton answer3;
    private javax.swing.JPanel imageContainer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel question;
    private javax.swing.JLabel timer_lb;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(java.util.Observable o, Object arg) {
        
            time = (int)arg;
            if(time>=10)
                this.timer_lb.setText("00:" + time);
            else
                this.timer_lb.setText("00:0" + time);
        
        if(time==0)
        {
            this.ansInfo.answer(n_question, -1, time);
            this.dispose();
           
        }
    }

    public static class PaintImage extends JPanel 
    { 
       public BufferedImage image; 

      public PaintImage (byte[][] image) 
      { 
        super(); 
        try 
        {                
           //byte[] finalarr = Files.readAllBytes(Paths.get("Challenges\\imagens\\000003.jpg"));
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            
            for(byte[] i : image)
                outputStream.write(i);
          
           this.image = ImageIO.read(new ByteArrayInputStream(outputStream.toByteArray())); 

        } 
        catch (IOException e) 
        { 
          e.printStackTrace();
        } 
      } 

      public void paintComponent(Graphics g) 
      { 
        g.drawImage(image,0, 0,300, 300, null); 
        //repaint(); 
      } 
    }
    
    public class QuestionRunner extends Thread{
        
        byte[] music;
        //boolean answer;
        TimerUpdate timer;
         Player mp3player;
        public QuestionRunner(byte[][] music,TimerUpdate timer) throws IOException{
            
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            for(byte[] m : music){
                if(m.length>0)
                    out.write(m);
            }
            
            this.music = out.toByteArray();
            this.timer = timer;
            answer = false;
        }
        
        public void run(){
            
            try {
                ByteArrayInputStream input = new ByteArrayInputStream(music);
                BufferedInputStream in = new BufferedInputStream(input);
                mp3player = new Player(in);
                new MP3Player().start();
               
                while(!answer){
                    int time = (60000 - mp3player.getPosition());
                    if(time<=0)break;
                        timer.timerupdate(time/1000);
                }
                if(answer) dispose();
                mp3player.close();
            } catch (JavaLayerException ex) {
                Logger.getLogger(QuestionGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        class MP3Player extends Thread{
            public void run(){
                try {
                    mp3player.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(QuestionGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    public  class TimerUpdate extends Observable{
        
            public  void timerupdate(int time){        
                this.setChanged();
                this.notifyObservers(time);
            }
        }
    public class AnswerInformer extends Observable{
        public void answer(int question,int opt, int time){
            String s = ""+question+";"+opt+";"+time;
            this.setChanged();
            this.notifyObservers(s);
        }
    }
}
