/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CLientGUI;

import Client.GameThread;
import Common.PDU_Builder;
import Common.User;
import Common.PDU;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author fdr
 */
public class Lobby extends javax.swing.JFrame implements Observer{

    /**
     * Creates new form Lobby
     */
    
    DatagramSocket socket;
    Register_Login regsiter_login;
    int label;
    Map<String,String> activeChallenges;
    User user;
    GameThread gt;
    public Lobby() {
        initComponents();
        
        
    }

    public Lobby(String nome, String points, DatagramSocket socket, Register_Login rl,int label,ArrayList<String> strs) throws IOException {
         initComponents();
         this.socket = socket;
         this.user = new User();
         this.user.username = nome;
         this.user.points = Integer.parseInt(points);
         this.regsiter_login = rl;
         this.label = label;   
         this.label_userInfo_nome.setText(this.user.username);
         this.label_userInfo_score.setText(""+this.user.points);
         bt_acceptChallenge.setEnabled(false);
         bt_removeChallenge.setEnabled(false);
         this.activeChallenges = new HashMap<>();
         
         DefaultListModel<String> model = new DefaultListModel<>();
         
         for(String s:strs){
             if(s!=null){
                String parsed = parser(s);
                model.addElement(parsed);
                this.activeChallenges.put(s, parsed);
             }
         }
         
        this.list_challenges.setModel(model);
        this.setLocationRelativeTo(null); 
        
        WindowAdapter adapter = new LogOutAdapterImpl(this,socket,rl);
        this.addWindowListener(adapter);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        list_challenges = new javax.swing.JList();
        label_listChallenges = new javax.swing.JLabel();
        button_list_challenges = new javax.swing.JButton();
        panel_user_info = new javax.swing.JPanel();
        ui_nome = new javax.swing.JLabel();
        ui_score = new javax.swing.JLabel();
        label_userInfo_nome = new javax.swing.JLabel();
        label_userInfo_score = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        bt_acceptChallenge = new javax.swing.JButton();
        bt_makeChallenge = new javax.swing.JButton();
        bt_removeChallenge = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        list_challenges.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Joguinho - 21h:10m:45s do dia 10 de Março de 2015", "Jogatina - 21h:15m:00s do dia 10 de Março de 2015" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        list_challenges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                list_challengesFocusLost(evt);
            }
        });
        list_challenges.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_challengesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(list_challenges);

        label_listChallenges.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        label_listChallenges.setText("Challenges:");

        button_list_challenges.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Refresh-icon-3.png"))); // NOI18N
        button_list_challenges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_list_challengesActionPerformed(evt);
            }
        });

        panel_user_info.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Info:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        ui_nome.setText("Name:");

        ui_score.setText("Score:");

        label_userInfo_nome.setText("test");
        label_userInfo_nome.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/user_info.png"))); // NOI18N

        jButton1.setText("Ranking");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_user_infoLayout = new javax.swing.GroupLayout(panel_user_info);
        panel_user_info.setLayout(panel_user_infoLayout);
        panel_user_infoLayout.setHorizontalGroup(
            panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_user_infoLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_user_infoLayout.createSequentialGroup()
                        .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ui_nome)
                            .addComponent(ui_score))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_userInfo_score, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(label_userInfo_nome, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_user_infoLayout.setVerticalGroup(
            panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_user_infoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                    .addGroup(panel_user_infoLayout.createSequentialGroup()
                        .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ui_nome)
                            .addComponent(label_userInfo_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel_user_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ui_score)
                            .addComponent(label_userInfo_score, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        bt_acceptChallenge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/Check-icon.png"))); // NOI18N
        bt_acceptChallenge.setText(" Accept ");
        bt_acceptChallenge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_acceptChallengeActionPerformed(evt);
            }
        });

        bt_makeChallenge.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        bt_makeChallenge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/math-add-icon.png"))); // NOI18N
        bt_makeChallenge.setText("Make Challenge");
        bt_makeChallenge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_makeChallengeActionPerformed(evt);
            }
        });

        bt_removeChallenge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/delete-icon.png"))); // NOI18N
        bt_removeChallenge.setText(" Remove ");
        bt_removeChallenge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_removeChallengeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_listChallenges)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_list_challenges))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bt_makeChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bt_acceptChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(bt_removeChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(panel_user_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bt_makeChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt_acceptChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bt_removeChallenge, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panel_user_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_listChallenges)
                    .addComponent(button_list_challenges))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean challengeMadeOrAccepted = false;
    private void bt_makeChallengeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_makeChallengeActionPerformed
        // TODO add your handling code here:
        buttonBlocktrigger b = new buttonBlocktrigger();
        b.addObserver(this);
        this.gt = new GameThread(socket,b,this.user);
        new MakeChallenge(this, true,socket,label,this.gt).setVisible(true);
        
        
        this.bt_makeChallenge.setEnabled(false);
        this.bt_acceptChallenge.setEnabled(false);
        challengeMadeOrAccepted = true;
    }//GEN-LAST:event_bt_makeChallengeActionPerformed

    private void button_list_challengesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_list_challengesActionPerformed

        try {
            PDU requestPDU = PDU_Builder.LIST_CHALLENGES(label);
            label++;
            byte[] data = PDU.toBytes(requestPDU);
            DatagramPacket packet = new DatagramPacket(data, data.length);
            socket.send(packet);
            packet = new DatagramPacket(new byte[1024], 1024);
            socket.receive(packet);
            PDU reply = PDU.fromBytes(packet.getData());
            byte[][] chs = reply.getData();
            this.activeChallenges = new HashMap<>();
            ArrayList<String> strs = new ArrayList<>();
            if(chs!=null){
                for(byte[] b: chs){
                    if(b!=null){
                        String ch = new String(b);
                        strs.add(ch);
                    }
                }
            }
            
            //parser
            
            DefaultListModel<String> model = new DefaultListModel<>();
         
            for(String s:strs){
                if(s!=null){
                    String parsed = parser(s);
                    model.addElement(parsed);
                    this.activeChallenges.put(s, parsed); 
                }
            }
         
            this.list_challenges.setModel(model);
        } catch (IOException ex) {
            Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
        }
                    
    }//GEN-LAST:event_button_list_challengesActionPerformed

    private void list_challengesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_challengesValueChanged
        // TODO add your handling code here:
        if(!challengeMadeOrAccepted){
             bt_acceptChallenge.setEnabled(true);
        }else{
            bt_removeChallenge.setEnabled(true);
        }
    }//GEN-LAST:event_list_challengesValueChanged

    private void bt_acceptChallengeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_acceptChallengeActionPerformed
        try {
            // TODO add your handling code here:
            int i = this.list_challenges.getSelectedIndex();
            String ch = (String) this.activeChallenges.keySet().toArray()[i];
            String[] parts = ch.split(",");
            PDU pdu = PDU_Builder.ACCEPT_CHALLENGE(label, parts[0]);
            byte[] data = PDU.toBytes(pdu);
            socket.send(new DatagramPacket(data, data.length));
            
            DatagramPacket packet = new DatagramPacket(new byte[1024], 1024);
            socket.receive(packet);
            pdu = PDU.fromBytes(packet.getData());
            
            
            if(pdu.getData()[21]==null){
               buttonBlocktrigger b = new buttonBlocktrigger();
               b.addObserver(this);
                this.gt = new GameThread(socket,b,this.user);
                this.gt.setChallengeData(parts[0],parts[1], parts[2], Integer.parseInt(parts[3]), label);
                this.gt.start();
            }
            else{
                
            }
            
            this.bt_makeChallenge.setEnabled(false);
            this.bt_acceptChallenge.setEnabled(false);
            this.bt_removeChallenge.setEnabled(false);
            
        } catch (IOException ex) {
            Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_acceptChallengeActionPerformed

    private void list_challengesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_list_challengesFocusLost
 
    }//GEN-LAST:event_list_challengesFocusLost

    private void bt_removeChallengeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_removeChallengeActionPerformed
        // TODO add your handling code here:
       
         int i = this.list_challenges.getSelectedIndex();
         if(i>-1){
            try {
                String s = (String)this.list_challenges.getSelectedValue();
                System.out.println(s);
                for(String st : activeChallenges.keySet())
                {
                    if(activeChallenges.get(st).equals(s)){
                        System.out.println(st.split(",")[0]);
                        s=st.split(",")[0];
                    }
                    
                }  
                
                PDU removeCh = PDU_Builder.DELETE_CHALLENGE(label, s);
                label++;
                byte[] b =PDU.toBytes(removeCh);
                DatagramPacket packet= new DatagramPacket(b, b.length);
                socket.send(packet);
    
                packet  =new DatagramPacket(new byte[1024], 1024);
                socket.receive(packet);
                
                removeCh = PDU.fromBytes(packet.getData());
                if(removeCh.getData()[21]!=null){
                    new ErrorWindow("Challenge",new String(removeCh.getData()[21]),"error",this).wshow();
                }else{
                    this.gt.challengeQueued = false;
                    new ErrorWindow("Challenge","Challenge Removido com Sucesso","message",this).wshow();
                }
                
                
            } catch (IOException ex) {
                Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
    }//GEN-LAST:event_bt_removeChallengeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            PDU request = PDU_Builder.LIST_RANKING(label);
            byte[] data = PDU.toBytes(request);
            socket.send(new DatagramPacket(data, data.length));
            
            DatagramPacket packet = new DatagramPacket(new byte[1024], 1024);
            socket.receive(packet);
            request = PDU.fromBytes(packet.getData());
            
            
            String ranking = new String(request.getData()[20]);
            
            new ErrorWindow("Ranking :",ranking, "message", new JFrame()).wshow();
            
        } catch (IOException ex) {
            Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

        private String parser(String date){
            
            String[] tokens = date.split(",");
            String nome = tokens[0]+ " - ";
            String hora = tokens[2].substring(0,2)+":h"+tokens[2].substring(2,4)+":m"+tokens[2].substring(4)+":s";
            String ano = "20"+tokens[1].substring(0,2);
            String dia = tokens[1].substring(4);
            String mes = tokens[1].substring(2,4);
            
            switch (mes) {
                case "01":  mes = "January";
                            break;
                case "02":  mes = "February";
                            break;
                case "03":  mes = "March";
                            break;
                case "04":  mes = "April";
                            break;
                case "05":  mes = "May";
                            break;
                case "06":  mes = "June";
                            break;
                case "07":  mes = "July";
                            break;
                case "08":  mes = "August";
                            break;
                case "09":  mes = "September";
                            break;
                case "10":  mes = "October";
                            break;
                case "11":  mes = "November";
                            break;
                case "12":  mes = "December";
                            break;
            }
            String data = dia + " de " + mes + " de " +ano;
            
            return nome+hora+" do"+" dia "+data;
        }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lobby.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lobby().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_acceptChallenge;
    private javax.swing.JButton bt_makeChallenge;
    private javax.swing.JButton bt_removeChallenge;
    private javax.swing.JButton button_list_challenges;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_listChallenges;
    private javax.swing.JLabel label_userInfo_nome;
    private javax.swing.JLabel label_userInfo_score;
    private javax.swing.JList list_challenges;
    private javax.swing.JPanel panel_user_info;
    private javax.swing.JLabel ui_nome;
    private javax.swing.JLabel ui_score;
    // End of variables declaration//GEN-END:variables

    
    public class buttonBlocktrigger extends Observable{
        
        public void blockButtons(){
            this.setChanged();
            this.notifyObservers(false);
        }
        
        public void enableButtons(){
            this.setChanged();
            this.notifyObservers(true);
        }
    }
    
    @Override
    public void update(Observable o, Object arg) {
        boolean b = (boolean)arg;
       // this.bt_acceptChallenge.setEnabled(b);
        this.bt_makeChallenge.setEnabled(b);
        //this.bt_removeChallenge.setEnabled(b);
        this.button_list_challenges.setEnabled(b);
        this.setVisible(b);
        //aparece timer para as perguntas!!!!
        //era nice
        
            //faz update dos pontos
            this.label_userInfo_nome.setText(this.user.username);
            this.label_userInfo_score.setText(""+this.user.points);
            
            challengeMadeOrAccepted = !b;
       
            if(b){
            try {
                PDU requestPDU = PDU_Builder.LIST_CHALLENGES(label);
                label++;
                byte[] data = PDU.toBytes(requestPDU);
                DatagramPacket packet = new DatagramPacket(data, data.length);
                socket.send(packet);
                packet = new DatagramPacket(new byte[1024], 1024);
                socket.receive(packet);
                PDU reply = PDU.fromBytes(packet.getData());
                byte[][] chs = reply.getData();
                this.activeChallenges = new HashMap<>();
                ArrayList<String> strs = new ArrayList<>();
                if(chs!=null){
                    
                    for(byte[] bs: chs){
                        if(bs!=null){
                            String ch = new String(bs);
                            strs.add(ch);
                        }
                    }
                }

                //parser

                DefaultListModel<String> model = new DefaultListModel<>();

                for(String s:strs){
                    if(s!=null){
                        String parsed = parser(s);
                        model.addElement(parsed);
                        this.activeChallenges.put(s, parsed); 
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            }
            
    }
    
    
    
    public class LogOutAdapterImpl extends WindowAdapter {

        public LogOutAdapterImpl(JFrame frame,DatagramSocket socket,Register_Login rl) {
            this.frame = frame;
            this.socket = socket;
            this.rl = rl;
        }
        JFrame frame;
        DatagramSocket socket;
        Register_Login rl;

        @Override
        public void windowClosing(WindowEvent e) {
           
            int confirm = JOptionPane.showOptionDialog(frame, "Logging out,\nAre you sure?", "Log Out Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (confirm==JOptionPane.YES_OPTION) {
                try {
                    PDU logout = PDU_Builder.LOGOUT_PDU(label);
                    byte[] data = PDU.toBytes(logout);
                    DatagramPacket packet = new DatagramPacket(data, data.length);
                    socket.send(packet);
                    
                    
                    packet = new DatagramPacket(new byte[1024], 1024);
                    socket.receive(packet);
                    
                    logout = PDU.fromBytes(packet.getData());
                    if(logout.getType()==0){
                        System.out.println("LOGOUT OK");
                    }
                    //eu sei que esta deprecated mas é seguro parar esta thread visto nao existir estruturas partilhadas
                    if(gt!=null){
                        System.out.println("is not null!");
                        gt.challengeQueued =false;
                       // if(gt.isAlive())
                         //   gt.interrupt();
                    }
                    //
                    frame.dispose();
                    rl.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Lobby.class.getName()).log(Level.SEVERE, null, ex);
                }
              
            }
        }
    }
}
